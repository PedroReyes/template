name: Release

on:
  pull_request:
    branches:
      - master
      - staging

defaults:
  run:
    shell: bash
    working-directory: bloc

jobs:
  prepare:
    name: Prepare release
    # if: startsWith(github.head_ref, 'release/')
    runs-on: ubuntu-22.04
    # needs: test
    outputs:
      release_version: ${{ steps.parse.outputs.release_version }}
      release_path: ${{ steps.parse.outputs.release_path }}
      release_network: ${{ steps.parse.outputs.release_network }}
      release_title: ${{ steps.parse.outputs.release_title }}
      release_description: ${{ steps.parse.outputs.release_description }}
      release_deploy_cmd: ${{ steps.parse.outputs.release_deploy_cmd }}
      release_audited: ${{ steps.parse.outputs.release_audited }} # TODO: This should be the commit hash of the audit or the commit of the release
      release_verify_cmd: ${{ steps.parse.outputs.release_verify_cmd }} # TODO: This should be the command to verify the release
      release_finish_cmd: ${{ steps.parse.outputs.release_finish_cmd }} # TODO: This should be the command to finish the release
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Parse release info
        id: parse
        run: |
          version=${BRANCH_NAME#release\/}
          path=release/$version
          network=$(yq -r .network $path/index.yml)
          echo "release_version=$version" >> $GITHUB_OUTPUT
          echo "release_path=$path" >> $GITHUB_OUTPUT
          echo "release_network=$network" >> $GITHUB_OUTPUT
          echo "release_deploy_cmd=$(yq -r '.deploy // ""' $path/index.yml)" >> $GITHUB_OUTPUT
          echo "release_verify_cmd=$(yq -r '.verify // ""' $path/index.yml)" >> $GITHUB_OUTPUT
          echo "release_finish_cmd=$(yq -r '.finish // ""' $path/index.yml)" >> $GITHUB_OUTPUT
          echo "release_audited=$(yq -r '.audited // ""' $path/index.yml)" >> $GITHUB_OUTPUT
          echo "release_title=$(yq -r '.title // ""' $path/index.yml)" >> $GITHUB_OUTPUT
          echo "release_description<<DESCRIPTION_DELIMITER" >> $GITHUB_OUTPUT
          echo "$(yq -r '.description // ""' $path/index.yml)" >> $GITHUB_OUTPUT
          echo "DESCRIPTION_DELIMITER" >> $GITHUB_OUTPUT
        env:
          BRANCH_NAME: ${{ github.head_ref }}

      - name: Output summary
        run: |
          echo "## $TITLE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### **üíª Network:** $NETWORK" >> $GITHUB_STEP_SUMMARY
          echo "### **‚úç Commit:** [\`$COMMIT\`]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/tree/$COMMIT)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Description" >> $GITHUB_STEP_SUMMARY
          echo "$DESCRIPTION" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        env:
          TITLE: ${{ steps.parse.outputs.release_title }}
          DESCRIPTION: ${{ steps.parse.outputs.release_description }}
          NETWORK: ${{ steps.parse.outputs.release_network }}
          COMMIT: ${{ github.event.pull_request.head.sha }}

      - name: Output audit info
        if: "steps.parse.outputs.release_audited != ''"
        run: |
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "### Audit" >> $GITHUB_STEP_SUMMARY
          echo "Audited contracts at commit [\`$AUDIT_COMMIT\`]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/tree/$AUDIT_COMMIT) :detective:" >> $GITHUB_STEP_SUMMARY
          audit_diff="$(git diff $AUDIT_COMMIT *.sol)"
          if [[ -z $audit_diff ]]; then
            echo "Contracts have not been modified since audit :heavy_check_mark:" >> $GITHUB_STEP_SUMMARY
          else
            echo "Contracts have been modified since audit :warning:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`diff" >> $GITHUB_STEP_SUMMARY
            echo "$audit_diff" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
        env:
          AUDIT_COMMIT: ${{ steps.parse.outputs.release_audited }}

  deploy:
    name: Deploy contracts
    if: startsWith(github.head_ref, 'release/')
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    needs: prepare
    environment: production
    outputs:
      deploy_commit: ${{ steps.commit.outputs.commit_hash }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: recursive
      - uses: actions/setup-node@v3
        with:
          node-version: "16.14.2"
          cache: "npm"

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Install dependencies
        run: npm ci

      - name: Generate docs
        run: rm -rf cache artifacts/ && npx hardhat docgen

      - name: Deploy contracts
        run: eval ${{ needs.prepare.outputs.release_deploy_cmd }} --network ${{ needs.prepare.outputs.release_network }}
        env:
          PRIVATE_KEY: "${{ secrets.PRIVATE_KEY }}"
          BSCSCAN_API_KEY: "${{ secrets.BSCSCAN_API_KEY }}"
          RELEASE_PATH: "${{ needs.prepare.outputs.release_path }}"

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4
        id: commit
        if: always()
        with:
          commit_message: üöÄ release ${{ github.event.repository.updated_at}} - üíª ${{ needs.prepare.outputs.release_network }} - ‚úç Update registries of deployed addresses
          repository: ./bloc
          file_pattern: ".openzeppelin/ release/ deployments.json"
          skip_checkout: true

      - name: Link to run in PR
        uses: actions/github-script@v6
        env:
          RUN_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ [**Deployment finished**](${process.env.RUN_URL}!) - üíª Network: ${{ needs.prepare.outputs.release_network }} - ‚è∞ ${{ github.event.repository.updated_at}`,
            });
